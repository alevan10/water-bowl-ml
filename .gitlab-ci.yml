# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Python.gitlab-ci.yml

# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python/tags/
image: python:3.11

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"


# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/reference/pip_install/#caching
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
cache:
  paths:
    - .cache/pip
    - venv/

before_script:
  - python -V  # Print out python version for debugging
  - apt-get update && apt-get install -y libhdf5-dev
  - pip install --upgrade pip setuptools wheel
  - pip install -r requirements.txt
  - export PYTHONPATH="$(pwd)/src:$(pwd)/src/prediction_api:$(pwd)/modeling_engine:$PYTHONPATH"

stages:
  - Static Analysis
  - Tests
  - Build
#  - Deploy

Pylint:
  stage: Static Analysis
  retry: 1
  tags:
    - gpu
  script:
    - pip install -r requirements-cuda.txt
    - make lint

Black:
  stage: Static Analysis
  retry: 1
  script:
    - make check-black

Version_Check:
  stage: Static Analysis
  retry: 1
  script:
    - python version_checker.py

Lint_Dockerfile:
  stage: Static Analysis
  retry: 1
  before_script: []
  image: hadolint/hadolint:latest-debian
  script:
    - hadolint src/docker/prediction_api.Dockerfile

Isort:
  stage: Static Analysis
  retry: 1
  script:
    - make check-isort

Unit:
  stage: Tests
  retry: 1
  tags:
    - gpu
  script:
    - pip install -r requirements-cuda.txt
    - pytest -v ./tests/unit


#Integration:
#  stage: Tests
#  retry: 1
#  services:
#    - name: postgres:14.3
#      alias: postgres
#      variables:
#        POSTGRES_ADDRESS: "postgres:5432"
#        POSTGRES_DATABASE: "postgres"
#        POSTGRES_USER: "postgres"
#        POSTGRES_PASSWORD: "postgres"
#  script:
#    - pytest -v ./tests/integration

Build:
  stage: Build
  retry: 1
  only:
    - main
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  before_script: []
  script:
    - PREDICTION_API_VERSION=$(cat VERSION)
    - mkdir -p /kaniko/.docker
    - >-
      /kaniko/executor
      --insecure
      --skip-tls-verify
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/src/docker/prediction_api.Dockerfile"
      --destination "levan.home:5000/waterbowl/prediction-api:${PREDICTION_API_VERSION}"

Build-Latest:
  stage: Build
  retry: 1
  only:
    - main
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  before_script: []
  script:
    - mkdir -p /kaniko/.docker
    - >-
      /kaniko/executor
      --insecure
      --skip-tls-verify
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/src/docker/prediction_server.Dockerfile"
      --destination "levan.home:5000/waterbowl/prediction-api:latest"
#
#Deploy:
#  stage: Deploy
#  retry: 1
#  only:
#    - main
#  image: alpine/helm:3.10.2
#  before_script: []
#  script:
#    - WATER_BOWL_API_VERSION=$(cat VERSION)
#    - helm upgrade --install water-bowl-api ./water-bowl-api --values=./water-bowl-api/values.yaml --namespace waterbowl --create-namespace --set image.tag=${WATER_BOWL_API_VERSION}
